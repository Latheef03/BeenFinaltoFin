package com.quickblox.reactnative.webrtc;

import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.quickblox.videochat.webrtc.QBRTCConfig;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Nullable;

/**
 * Created by Injoit on 2021-01-06.
 * Copyright Â© 2020 Quickblox. All rights reserved.
 */
public class QBRTCConfigModule extends ReactContextBaseJavaModule {
    private static final String MODULE_NAME = "RNQBRTCConfigModule";

    private static final int MIN_ANSWER_TIME_INTERVAL = 10;
    private static final int MIN_DIALING_TIME_INTERVAL = 3;

    protected ReactApplicationContext reactContext;

    @Override
    public String getName() {
        return MODULE_NAME;
    }

    @Nullable
    @Override
    public Map<String, Object> getConstants() {
        final Map<String, Object> constants = new HashMap<>();
        return constants;
    }

    public QBRTCConfigModule(final ReactApplicationContext reactContext) {
        super(reactContext);
        this.reactContext = reactContext;
    }

    @ReactMethod
    public void setAnswerTimeInterval(double interval, final Promise promise) {
        if (interval < MIN_ANSWER_TIME_INTERVAL) {
            promise.reject(new Exception("Value should be equal to or greater than " + MIN_ANSWER_TIME_INTERVAL));
            return;
        }
        QBRTCConfig.setAnswerTimeInterval((long) interval);
        promise.resolve(null);
    }

    @ReactMethod
    public void getAnswerTimeInterval(final Promise promise) {
        long interval = QBRTCConfig.getAnswerTimeInterval();
        promise.resolve((double) interval);
    }

    @ReactMethod
    public void setDialingTimeInterval(double interval, final Promise promise) {
        if (interval < MIN_DIALING_TIME_INTERVAL) {
            promise.reject(new Exception("Value should be equal to or greater than " + MIN_DIALING_TIME_INTERVAL));
            return;
        }
        QBRTCConfig.setDialingTimeInterval((long) interval);
        promise.resolve(null);
    }

    @ReactMethod
    public void getDialingTimeInterval(final Promise promise) {
        long interval = QBRTCConfig.getDialingTimeInterval();
        promise.resolve((double) interval);
    }
}